// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

model Team {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  users     UserTeam[]
  companies Company[]
  invoices  Invoice[]
  projects  Project[]
}

model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  passwordHash String
  firstName    String
  lastName     String
  teams        UserTeam[]
  avatarUrl    String?
  lastLoginAt  DateTime?
}

model Company {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyName     String
  contactName     String?
  email          String
  phone          String?
  address        String
  city           String
  state          String?
  postalCode     String
  country        String
  taxId          String?
  notes          String?
  paymentMethods String?    @db.LongText
  team        Team          @relation(fields: [teamId], references: [id])
  teamId      String
  invoices    Invoice[]
  types       CompanyType[]
  projects    Project[]
}

model CompanyType {
  id        String    @id @default(cuid())
  name      String    @unique // 'customer', 'contractor'
  companies Company[]
}

model Invoice {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  number      String
  date        DateTime
  dueDate     DateTime
  status      String // 'draft', 'sent', 'paid'
  amount      Float
  name                String?
  tax                 Float         @default(0)
  totalAmount         Float
  currency           String        @default("CAD")
  selectedPaymentMethod String?
  companies          Company[]
  items              InvoiceItem[]
  team               Team          @relation(fields: [teamId], references: [id])
  teamId             String
}

model InvoiceItem {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  quantity         Int
  unitaryPrice     Float
  invoice          Invoice           @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId        String
  timeTrackingItem TimeTrackingItem?
}

model Project {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  description String?            @db.Text
  currency    String            @default("CAD")
  team        Team               @relation(fields: [teamId], references: [id])
  teamId      String
  timeEntries TimeTrackingItem[]
  companies   Company[]
}

model TimeTrackingItem {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  date          DateTime
  description   String
  hours         Float
  hourlyRate    Float
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  invoiceItemId String?      @unique
}

model UserTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String

  @@unique([userId, teamId])
}
