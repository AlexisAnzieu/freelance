// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

model Team {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  users     UserTeam[]
  customers Customer[]
  invoices  Invoice[]
}

model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  passwordHash String
  firstName    String
  lastName     String
  teams        UserTeam[]
  avatarUrl    String?
  lastLoginAt  DateTime?
}

model Customer {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyName String
  contactName String
  email       String    @unique
  phone       String?
  address     String
  city        String
  state       String?
  postalCode  String
  country     String
  taxId       String?
  notes       String?
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  invoices    Invoice[]
}

model Invoice {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  number      String   @unique
  date        DateTime
  dueDate     DateTime
  status      String // 'draft', 'sent', 'paid', 'overdue'
  amount      Float
  tax         Float    @default(0)
  totalAmount Float
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
}

model UserTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String

  @@unique([userId, teamId])
}
